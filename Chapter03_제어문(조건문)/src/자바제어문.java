/*
 	자바에서 지원하는 제어문
 		=> 프로그램의 흐름을 제어하기 위해
 			필요시에는 건너뛰는 프로그램을 만들 수 있다 (조건문)
 			반복수행을 요청 (반복문)
 			중간에 정지시킬 수 있음 (반복제어문) => ESC
 		=> 자바의 모든 제어문은 바로 밑에 있는 문장 1개만 수행한다
 			여러개 동시에 제어하고 싶을 땐 { } 을 이용
 			
 		1. 조건문 54page 
 			중복이 있을 땐 단일조건문, 중복이 없다면 다중조건문을 사용 
 			ex. 3,5,7의 배수 -> 중복이 있어서 다중조건문 사용시 누락발생
 			
 			1)단일조건문 (마우스클릭/버튼클릭/상세보기)
 			
 				    => 조건문에는 부정연산자(!)/비교연산자/논리연산자(&&, ||) 만 사용가능 => 결과값이 true/false만
 				    c언어에서는 1,0으로값이 나와도 사용 가능, 하지만 자바에서는 무조건 true / false 만 가능
 				    
 				if(조건문)
 				{
 					실행문장 // true일 때 실행
 				}
 				
 				단일조건문의 단점 => 여러개 사용시에 모든 if문의 조건을 확인해야 해서 속도가 늦다
 				
 				중첩조건문
 				if(조건문)
 				{
 					true일 때 실행
 					if(조건문)
 					{
 					
 					}
 				}
 				
 				
 				=> 더 간편하게 사용하려면
 				if( 조건 && 조건 )
 				{
 				
 				}
 				
 			2)선택조건문 => true / false 나눠서 처리
 					  => 가장 많이 사용되는 조건문
 					  => 웹에서는 모든 내용이 브라우저로 전송되기 때문에 많이 사용 
 					  	 ex. 중복체크, 검색, 에러발생여부
 					  	 
 				if(조건문)
 				{
 					실행문장 // true일 때 실행
 				}
 				else(조건문)
 				{
 					실행문장 // false일 때 실행
 				}
 				
 				=> 간편하게 사용할 땐
 				System.out.println( 조건 ? 실행1 : 실행 2);  // 삼항연산자
 				
 				
 			3)다중조건문 (메뉴) => 메뉴처리 , 키보드 처리, 별점
 							=> 여러개의 조건문을 사용하지만 한 개의 조건만 수행한다
 			
 			
 				if(조건문)
 				{
 					실행문장 
 					조건이 true면 실행하고 종료
 					false면 아래문장으로 넘어감
 				}
 				else if(조건문)
 				{
 				}
 				else if(조건문)
 				{
 					실행문장
 				}
 				else
 				{
 					조건이 모두 false일 때
 					실행문장 
 				}
 				
 				
 								
 			
 		2. 선택문
 			switch~case (값을 1개만 선택해서 처리)->게임에서 많이 사용, 키값에 따라 처리
 			=> 다중조건문이랑 비슷하지만 switch~case는 값을 1개만 선택하는 것,
 									다중조건문은 범위를 선택하는 것의 차이
 			switch(정수/문자/문자열)
 				case 값1 :
 					실행문장
 					break;
 				case 값2 :
 					실행문장
 					break;
 				case 값3 :
 					실행문장
 					break;
 					
 			=> case 값이 중복되는 값이 있으면 안되고
 				default는 상황에따라 생략가능
 				문자는 '', 문자열은 ""로 표현
 				
 				
 					
 			
 		3. 반복문  => 목록출력 , 슬라이드
 			 ==> front에서 많이 사용
 			for문 => 반복문중에 가장 많이 사용되는 형식  // 반복횟수가 지정된 경우 주로 사용 
 			
 				for( 초기식 ; 조건식 ; 증감식 )
 				{
 					반복수행 문장
 				}
 				
 				초기식 : 시작점
 				조건식 : 끝점 
 					false가 될때까지 수행 =>true/false 
 										~~~~~~~~~~
 									부정연산자, 비교연산자, 논리연산자 사용가능
 				증감식 : ++,--,+=,-=
 			
 				무한루프로도 가능해
 				for( 초기식 ; ;)
 				
 				
 				
 				
 				
 			이중for문 => 
 					
 				for( 초기식 ; 조건식 ; 증감식 )   // 세로(줄 수)
 				{
 					for( 초기식 ; 조건식 ; 증감식 )  // 가로
 					{
 						반복수행 문장
 					}
 				}
 				
 				
 				ex.
 				for(int i=1;i<=4;i++)
				{
					for(int j=1;j<=5;j++)
					{
						System.out.print("*");
					}
					System.out.println();
				}
				
				*****
				*****
				***** 
			 	***** 로 출력된 i는 세로줄 수, j는 가로줄 수
 				
 			while => 데이터베이스 / 파일읽기에서 많이 사용  // 반복횟수가 없는 경우 사용
 				조건을 먼저 검색하고 사용한다=> 그래서 사용을 한 번도 못할 수 있다
 				
 				==> back에서 많이 사용
 				
 				초기값
 				while(조건식)
 				{
 					반복수행문자
 					증가식
 				}
 				
 				=>조건식이 true면 계속 수행하고 false가 되면 종료
 			
 			do~while => 자바에서는 사용 빈도가 거의 없다  //  쉬프트연산자, 비트연산자, 반전연산자는 
 													웹에서는 사용하지 않아서 책에도 안나와
 				조건을 나중에 검색하기 때문에 무조건 한 번은 수행한다
 				
 				do
 				{
 					반복수행문장
 					증가식
 				}while(조건식)
 				
 				=>우선 한 번 실행하고 조건식이 true면 계속 수행하고 false가 되면 종료
 				
 			
 		4. 반복제어문
 			break
 			continue => 특정부분을 제외시킬 때 사용
 		
 	
 */


import java.io.*;
public class 자바제어문 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int score=67;
		if(score>=60) {
			System.out.println("합격");
			System.out.println("프로그램종료");
		}
		
	}

}
