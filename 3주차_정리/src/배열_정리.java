/*
 	HTML/CSS/JavaScript -> 2주정도 단축 , 프로젝트대신 강의진행=> 시간단축(대신 남아서해야해)
 	자바(서버 연결)/자바스크림트(브라우저에서만)
 	데이터저장 : 변수 => 데이터형 
 					  정수 : byte int long
 					  실수 : long double
 					  논리 : boolean
 					  문자 : char
 					  문자열 : String
 					  
 	데이터 가공 ㅣ 연산자 / 제어문
 		1. 연산자
 			=> 단항연산자
 				증감연산자 (++,--)
 				부정연산자 (!)
 				형변환연산자 => 클래스형변환
 							---------
 							=> 상속 / 포함 / 라이브러리
 						=> Upcasting / DownCasting
 						   ---------   -----------
 						    자동형변환	     강제형변환
 			=> 이항연산자
 				산술연산자 : +,-,/,*,%    (0으로나눌 수 없다는 점 예외처리 꼭 하기)
 				
 			=> 삼항연산자 => 웹(JSP=>HTML+JAVA)
 						 ===================
 						 HTML/JAVA 분리
 						 ===================MVC
 						 
 						 조건? 값1 : 값2
 						 조건이 true-> 값1
 						 	  false -> 값2
 						 	 
 						 => 이전페이지 / 다음페이지
 						 => 웹 핵심 : 사용자의 편리성
 						 			1. 화면 ui -> 이미지 12~15
 						 			   게시물 : 15~20
 						 
 		2. 제어문
 			=> 조건문
 				단일조건문 : 조건이 true일 때 처리
 					( 부정연산자 / 논리연산자 / 비교연산자 )
 				
 				선택조건문 : 조건이 true/false일 때 나눠서 처리
 					( if문 )
 					
 			=> 반복문
 				for문 : 반복횟수가 지정되어 있을 때
 					for(int i=0;i<14;i++
 					{
 						실행문장
 					}
 				for-each : 한개씩 차례대로 저장할 때
 					for(int a:arr)
 					{
 						실행문장
 					}
 				while : 반복횟수가 지정되어 있지 않을 때
 					while(조건)
 					{
 						실행문장
 						증가식(i++)
 					
 					}
 				
 				
 			=> 반복제어문
 				break : 반복문을 종료할 때 사용
 					System.exit(0);
 						0이면 정상종료
 						0이 아니면 비정상종료
 				
 				continue
 			
 	-----------------------------------
 	배열 : 데이터를 묶어서 사용
 		관련된 데이터를 하나의 이름으로 묶어 여러개를 제어
 		
 		ex. Board => 글쓰기, 목록, 상세보기, 수정, 찾기, 삭제 
 			----     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 			클래스			각각이 메소드
 			Food => 목록(페이징), 상세보기, 찜하기, 예약하기, 좋아요...
 		
 		
 		초기값설정
 			명시적 설정 
 				int arr[5]={1,2,3,4,5};
 			기본값 초기화
 				int[] arr-new int[5];  => 0으로 초기화
 				
 			선언 후 초기화
 				int[] arr;
 				arr=new int[]{1,2,3,4,5};
 		배열은 한 번 설정하면 메모리 크기가 동일
 		변경이 불가능 => 고정적이다
 		
 		==> 그래서 가변형 배열이 나와 => 클래스형 (colleaction)
 							   => ArrayList / Map / Set
 							   
 		int[] arr = new int[5];
 		*new는 메모리를 저장할 수 있는 공간을 만들어준다 라는 의미
 		---arr---			-------------------
 		  0x100				 0 | 0 | 0 | 0 | 0 
 		---------			-------------------
							0x100번지에 저장
							
		값 변경 / 초기값 
		일반 for문을 이용
		
		값 읽기
		for-each를 주로 사용한다
		실제 배열에 저장된 값을 읽기
 			
 	메소드 : 관련된 명령문을 묶어서 사용
 		종류 2가지 (사용자정의 메소드, 라이브러리에서 제공하는 메소드(API))
 								mvnrepository.com

 			사용자 정의 메소드
 				특정 작업을 하기 위한 명령문의 집합
 				기능처리(한가지 기능만 처리)
 				=> 재사용, 유지보수(수정이 가능)
 				
 				**형상관리 : GIT(공통 프로젝트)
 					=> 협업(면접 필수)
 					=> commit하다가 문제가 생기는 경우가 많아 (충돌)
 			메소드를 사용하는 목적
 				반복되는 기능에 대한 코드를 제거하기 위해
 				코드관리가 쉽게 하기 위해 => 기능별로 나눠서 처리
 					( 입력/처리/출력)
 				소스를 간결하게 만들기 위해
 				다른 클래스와 연결
 				재사용성
 				
 				
 			메소드의 종류
 				공통메소드 : 자동으로 메모리에 저장 
 					static
 				인스턴스 메소드 : 메모리마다 따로 저장
 					new 를 사용해서 저장
 				추상메소드 : 선언 => 필요시마다 구현
 							설계단에서 주로 사용
 							
 				
 			메소드명
 				변수 식별자
 				알파벳, 한글 시작
 				알파벳은 대소문자 구문
 				숫자는 사용가능 => 맨 앞에서 사용 금지
 				공백 사용이 불가능
 				키워드는 사용금지 
 				특수문자($,_)
 				**소문자로 시작하면 좋다
 				**구분자 -> 메소드명은 종복이 없게 만들어야한다
 				*약간의 의미만 부여
 	
 	------------------------------------
 			
 		클래스의 구성요소
 		=필드(변수)
 		=생성자
 		=메소드
 		
 			
 			
 */		
public class 배열_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
