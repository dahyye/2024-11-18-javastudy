package com.sist.main;


/*
 
 	1. 클래스 종류 ( 일반클래스와 인터페이스에 집중해서 공부 )
 		일반클래스
 			=>메모리에 저장 후 사용(객체를 생성)
 				클래스명 객체명 = new 생성자()
 				객체명.메소드, 객체명.변수
 				->사용후 gc에 의해 메모리회수
 			[접근지정어][제어어] class ClassName
 			{
 				----------
 				멤버변수(객체마다 따로 저장하는 공간, 한개의 공간에 저장(static)->공유변수)
 				----------
 				생성자(멤버변수의 초기화, 시작과 동시에 처리하는 기능)
 				----------
 				메소드
 				----------				
 			}
 			
 			상속 : 재사용
 				기존의 클래스 기능을 다시 사용 : extends
 				웹에서는 사용자 정의 클래스 상속
 				일반 => 라이브러리
 				단일상속만 지원 
 				상속처리 : 추상클래스 / 인터페이스
 				-----> 오버라이딩기법
 			
 		추상클래스
 			미완성 클래스(메소드가 선언만 되고 구현이 안되어 있다)
 			-> 사용시에는 반드시 상속을 받아서 구현 후 사용
 			-> 서로 다른 클래스를 여러개 묶어서 한 개의 객체명으로 제어
 			-> 대부분 오버라이딩 기법을 사용한다
 			
 			형식)
 				[접근지정어] abstract class ClassName
 				{
 					----------------------
 					변수 -> 멤버변수
 					----------------------
 					생성자
 					----------------------
 					메소드 : 구현된 메소드
 					public 리턴형 메소드명(매개변수..)
 					{
 						return 값;
 					}
 					//클래스마다 공통 사용
 					//클래스에서 필요시에 오버라이딩해서 사용한다 
 					----------------------
 					메소드 : 구현이 안된 메소드 => 추상메소드
 					public abstract 리턴형 메소드명(매개변수..);
 					//추상메소드는 몸체{} 가 없다
 					//클래스마다 처리 내용이 다른 경우
 					//프로그램에 맞게 구현해서 사용
 					//데이터베이스 연동 -> 드라이버를 설정 -> 모든 데이터베이스에 연결
 					 				 ---------
 					 				 oracle.jdbc.driver.OracleDriver
 					 				 -> com.mysql.cj.Driver
 					//추상클래스는 자체에서 객체 생성이 불가능
 					//상속받은 클래스를 이용해서 사용
 					 	상위클래스 객체 = new 하위클래스생성자();
 					 	=> 추상클래스는 녹색c
 					----------------------
 				 				
 				}
 		인터페이스 
 			오라클연동 / 웹개발 / 스프링
 			추상클래스의 일종
 			추상클래스를 보완하기 위해사용
 			추상클래스 (단일 상속) -> 인터페이스(다중 상속)
 			인터페이스는 결합성이 낮은 프로그램에 주로 사용
 			형식)
 			 [접근지정어] interface 인터페이스명
 			 {
 			 	----------------------
 			 	상수형변수
 			 	public static final int a;
 			 	생략이 가능
 			 	(public static final) int b;
 			 	----------------------
 			 	생성자는 존재하지 않는다
 			 	메소드 -> 선언만 되어 있다
 			 	public abstract 리턴형 메소드명(매개); 
 			 	~~~~~~~~~~~~~~~
 			 		생략가능
 			 	//인터페이스는 모든 변수와 메소드가 public 
 			 	----------------------
 			 	jdk1.8 추가
 			 	=> 구현된 메소드
 			 	public default 리턴형 메소드명()
 			 	{
 			 	
 			 	}
 			 	----------------------
				=> 구현된 메소드
				public static 리턴형 메소드명()
				{
				
				}
 			 	----------------------
 			 	
 			 
 			 }
 			 
 			 => 윈도우 : => Button
 			 => 웹 : 사용자 요창값 받기
 					request 
 					사용자 요청 처리 결과값 보내기
 								------ 
 								오라클
 								
 			 
 		네트워크/쓰레드  //서버를 만들거나 하진 않아서 한 번만 보고 넘어갈 것 같다
 			내부 클래스 : 서버제작
 					=> 서버 / 클라이언트
 			
 			class Server
 			{
 				= 접속한 클라이언트 정보 저장 => ip, port 
 				       | -> 공통으로 사용되는 변수 / 메소드가 있을 때
 				class Client
 				{
 					통신하는 메소드 => 쓰레드
 				}
 			}
 			
 			
 			익명의 클래스 : 상속이 없이 오버라이딩이 가능
 				=> 데이터 연결할 때 마이바티스나 / JPA에서 사용
 			class A
 			{
 				B b=new B()
 				{	//객체를 생성하고 그 안에서 오버라이딩
 					public void display()
 					{
 					}
 					//메소드를 추가
 					//윈도우에서 주로 사용
 				}
 			}
 			class B
 			{
 				public void display()
 				{
 				}
 			}
		
		java.lang에서 지원
		 => 종단 클래스 : 상속이 안되는 클래스
		  	String / System / Scanner
		  	
		  public final class String 
		  		------
		  {
		  }
		  
		  
		
  
 */


public class 클래스종류_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
