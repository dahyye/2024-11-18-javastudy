/*
 
 	접근 지정어 => 객체 사용 범위 지정
 	
 	=>멤버변수 : 다른 클래스에서 사용 가능
 		[접근지정어] 데이터형 변수명
 		-----------------------------------
 		[접근지정어] [제어어] 리턴형 메소드명(매개변수)
 	
 	
 	=> 지역변수에는 접근 지정어를 사용할 수 없다
 	   ------> 매소드안에서 사용 가능
 	   => final만 사용이 가능 => 상수/변수
 	
 	
 	=> 클래스, 멤버변수, 메소드에서 접근을 제어하기 위해 사용
 	
 	------------------------------------------------------------------------------------
 	접근 지정어		적용 대상				접근 가능 대상					접근 불가 대상
  	------------------------------------------------------------------------------------
   	public		클래스, 필드(멤버변수)		모든 대상							x
   				생성자, 메소드
   	------------------------------------------------------------------------------------
   	protected	멤버변수, 생성자			같은 폴더(패키지)				다른 폴대에서 사용이 불가능
   				메소드					또는 상속받은 클래스
   				 						=>다른 폴더에 있는경우도 가능
   	------------------------------------------------------------------------------------
   	default		클래스, 멤버변수			같은 폴더에서만 접근 가능			다른 폴대에서 사용이 불가능
   				생성자, 메소드				
   	------------------------------------------------------------------------------------
  	private		멤버변수, 생성자			자신의 클래스 내부				클래스 외부에서는 사용금지
  				메소드
  	------------------------------------------------------------------------------------
 	private < default < protected < public
 	
 	오버라이딩 할 때 접근지정어 처리를 해야해
 	(접근 지정어는 확장은 가능하지만 축소는 불가능)
 	
 	멤버변수 => 은닉화때문에 private를 많이 사용
 	생성자, 클래스, 메소드 => 모든 클래스를 연결하기 위해 public을 많이 사용
 						---------
 						다른 클래스 다른 폴도에 존재할 수 있다
 						
 						
 						
 	제어어
 	  => static \ abstract \ final
 	  static => 공통적인 => 공통으로 사용되는 메소드가 있거나 변수가 있을 때 사용
 	  final => 마지막 => 변수(상수) , 메소드(종단), 클래스(종단)
 	  							  --------------------
 	  							  있는 그대로 사용
 	  							  String, Math, Scanner, System
 	  abstract => 추상적인 => 공통기능 => 선언
 	  ------- 클래스나 메소드에서만 사용이 가능
 	  	기능설계할 때 많이 사용
 	  	ex. 게시판==> CRUD(Create Read Update Delete)
 	  		글쓰기, 목록, 상세보기, 수정, 삭제, 검색
 	  		
 	  		=> 서로 다른 클래스를 연결해서 사용
 	  		=> 클래스 여러개 제어
 	  		=> 결합성 낮게 만들 수 있다
 	  		
 	  		
 	  클래스 : public / default => public : 모든 클래스 사용
 	  메소드 : public / default / private / protected 
 	  		=> 메소드의 역할 : 다른 클래스와의 통신(메세지) => public
 	  생성자 : public
 	  멤버변수 : private(데이터보호) => 은닉화
 	  		메모리에서 보이지 않는다고 가정
 	  		=> 어떻게 통신할까??
 	  		=> 변수기능 : 쓰기(저장), 읽기(데이터가져오기)
 	  			=> 메소드로 처리 : getter/ setter
 	  			
 	  지역변수 : 접근지정어가 필요없다(메소드안에서만 사용이 가능
 	  			=> 상수(final)
 	  			
 	  
 	  객체지향의 특성
 	  1. 캡슐화 : 외부로부터 데이터 보호
 	  			데이터 손상 방지(id, pwd...)
 	  			=> 필요한 경우에 메소드를 이용해서 사용이 가능하게 만든다
 	  2. 상속 : 재사용
 	  3. 다형성 : 기능 추가(오버로딩), 기능변경(오버라이딩)
 	  4. 추상화 : 중복제거 ( 공통적인 내용 모아서 관리)
 	  			=> 공통모듈
 	  
 */

class Member
{
	private String id;//멤버클래스안에서만  //레드
	protected String pwd;//같은 폴더에서 사용가능//옐로우
	int age;//같은 폴더 사용가능 //블루
	public String name;//모든 클래스 사용가능  //그린

}
public class 접근지정어_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
		Member m = new Member();
		
		
	}

}
