/*
 * 
	1. 객체지향 프로그램(조립식)
		기능별 분리해서 클래스와 클래스를 연결해서 처리
								 ~~~~~~~~~~> 메소드
		EX. 컴퓨터
			CPU / 하드디스크 / 모니터 / 메모리..
			-------------------------------클래스
			메인보드에 조립
			------------
		class ClassName
	 	{
	 		구성요소
	 		-------------------
	 		변수 : 멤버변수, 공유변수 => 다른 클래스에서 사용가능
	 		-------------------
	 		생성자 : 멤버변수에 대한 초기화, 시작과 동시에 처리
	 				=> 메모리 저장시 호출
	 				=> 자동로그인, 데이터베이스연결, 서버연결
	 		-------------------
	 		기능설계 => 메소드
	 		-------------------
	 	
	 		
	 	}
		
		
	=> 클래스
		1) 사용자 정의 데이터형 => 데이터형 클래스
		 					 -------------
		 					 => 관련된 데이터를 모아서 관리
		 					 => ~VO, ~DTO
		 					
		 	*DTO는 데이터 전송 객체로, 주로 데이터베이스와 애플리케이션 간의 데이터 전송을 위해 사용됩니다
		 	*VO는 값 객체로, 불변성을 가지며 주로 비즈니스 로직에서 사용
		 					
		2) 한 개의 기능(메소듬) => 액션 클래스
							 => 데이터를 활용하는 메소드
							 => ~DAO, ~Model
		
	=> 메소드 (웹에서는 메뉴나 버튼이 메소드라고 생각하면 된다)
		한 개의 기능을 수행하는 명령문의 집합
		메소드는 호출이 되면 처음부터 수행 => 다시 호출된 위치로 복귀
		
		ex. 사직연산을 하는 메소드를 만든다고 하면 각 계산별 메소드 4개
			그리고 조립시켜주는게 필요해
			
		ex. 로그인처리 / 회원 가입 / 회원 수정 / 회원 탈퇴 (로그인관련)
			목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색 (게시판)
		
		-반복적인 문장이 있는 경우 반복을 제거하기 위해서 사용
		ex. 
			오라클연결
			----------
			목록 읽기 기능
			----------
			오라클 연결
			목록 읽기
			오라클 닫기
			----------
							==> 오라클 연결, 닫기가 반복 => 메소드화시키기
			글쓰기
			----------
			오라클 연결
			글쓰기 읽기
			오라클 닫기
			----------
 	
 			상세보기
 			----------
			오라클 연결
			상세보기 읽기
			오라클 닫기
			----------
 		
 		-명령문을 기능별 분리 => 단락을 나눠서 처리
 			장점  : 가독성, 유지보수, 재사용, 최적화
 			
 		-메소드 구성요소
 		1) 결과값 : 사용자 요청에 따라 결과값 추출(리턴형)
 		2) 사용자 요청 : 매개변수(parameter)
 		3) 메소드명 : 기능에 맞게 이름 부여
 					plus(), mines() ...
 					변수 식별자와 동일한 방식
 					- 알파벳, 한글로 시작
 					- 숫자 사용은 가능하지만 맨 앞에 사용은 불가능
 					- 키워드는 사용할 수 없다
 					- 특수문자 일부 사용 가능(& , _)
 					- 공백이 있으면 안된다
 					- 일반적으로 소문자로 시작한다
 					
 					
	 		[접근지정어][옵션] 리턴형 메소드명(매개변수)
	 		{
	 			구현
	 			return 값 => 결과값
	 		}
 			
 			접근지정어(Modify)
 				public 
 				private 자신의 클래스에서만
 				protected 같은 폴더&상속받은 클래스에서 사용
 				default 같은 폴더에서만 사용
 			옵션
 				static 자동 메모리 저장
 				final 종단
 				abstract 선언만
			리턴형(결과값은 반드시 1개만 사용가능)
				기본형
				배열 
				클래스(String)
				
				
			①리턴O 매개변수O => String substring(int begin)
			②리턴O 매개변수X => Math.random()
			③리턴X 매개변수O => void println(String s)
			④리턴X 매개변수X => void System.out.println() -> 사용빈도가 거의 없다		
			
			③④는 메소드 자체에서 출력
			void는 생략가능
			
			
		메소드는 반드시 호출을 해야 사용이 가능
		void display()
		int display()
		int display(int a)
		void display(int a, int b)
		
		
		public static void main(String[] args) {
			
		display();
		int a=display();
		int a=display(10);
		display(10, 20);
		
		
		}
		
		성적을 메소드로 만들 때 kor[], mat[], eng[]를 한 번에 하고 싶다 
		=> call by value 로 하면 값을 
			
			

 */
public class 메소드_1 {
	//4번 유형 리턴형X 매개변수X
	//메소드 안에서 구구단 출력
	//static을 붙이면 컴파일 시 자동저장
	static void gugudan()
	{
		//void=> 메소드안에서 전체저리를 하고 출력하겠다
		for(int i=1;i<=9;i++)
		{
			for(int j=2;j<=9;j++)
			{
				System.out.printf("%2d * %2d = %2d\t", j,i,j*i);
			}
			System.out.println();
		}
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gugudan();
	}

}
